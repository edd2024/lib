// scripts/build-modules.js
// Auto-generates src/js/modules.js and src/css/modules.css from files in src/js and src/css.
// JS: imports every top-level .js in src/js (excluding modules.js) and calls init() if present.
// CSS: @imports every top-level .css in src/css (excluding modules.css), sorted.

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const SRC_JS_DIR = path.resolve(__dirname, '..', 'src', 'js');
const SRC_CSS_DIR = path.resolve(__dirname, '..', 'src', 'css');
const MODULES_JS_PATH = path.join(SRC_JS_DIR, 'modules.js');
const MODULES_CSS_PATH = path.join(SRC_CSS_DIR, 'modules.css');

// Utility: list files in a dir matching ext, excluding names
function listFiles(dir, ext, exclude = []) {
  if (!fs.existsSync(dir)) return [];
  return fs.readdirSync(dir)
    .filter(f => f.toLowerCase().endsWith(ext))
    .filter(f => !exclude.includes(f))
    .sort((a, b) => a.localeCompare(b, undefined, { numeric: true, sensitivity: 'base' }));
}

// Generate modules.js
function generateModulesJS() {
  const files = listFiles(SRC_JS_DIR, '.js', ['modules.js']);
  const imports = files.map(f => {
    const varName = 'mod_' + f.replace(/[^a-zA-Z0-9]/g, '_').replace(/_js$/, '');
    return `import * as ${varName} from "./${f}";`;
  }).join('\n');

  const calls = files.map(f => {
    const varName = 'mod_' + f.replace(/[^a-zA-Z0-9]/g, '_').replace(/_js$/, '');
    return `  if (typeof ${varName}.init === 'function') { try { ${varName}.init(); } catch (e) { console.warn('init failed for ${f}:', e); } }`;
  }).join('\n');

  const content = `/* Auto-generated by scripts/build-modules.js — DO NOT EDIT */
${imports}

export function initLib() {
${calls}
}
`;

  fs.writeFileSync(MODULES_JS_PATH, content, 'utf8');
  console.log(`[build-modules] Wrote ${path.relative(process.cwd(), MODULES_JS_PATH)} with ${files.length} modules`);
}

// Generate modules.css
function generateModulesCSS() {
  const files = listFiles(SRC_CSS_DIR, '.css', ['modules.css']);
  const imports = files.map(f => `@import "./${f}";`).join('\n');
  const banner = `/* Auto-generated by scripts/build-modules.js — DO NOT EDIT */\n`;
  fs.writeFileSync(MODULES_CSS_PATH, banner + imports + '\n', 'utf8');
  console.log(`[build-modules] Wrote ${path.relative(process.cwd(), MODULES_CSS_PATH)} with ${files.length} css files`);
}

generateModulesJS();
generateModulesCSS();